import { createWriteStream } from 'node:fs'
import { pipeline } from 'node:stream/promises'


const OVERLOADS = 25


function identity(value) {
    return value
}


function * declarationStatement({
    index,
    name,
    formatArgumentReturnType = identity,
    formatFinalReturnType = identity
}) {
    yield `export declare function ${name}<\n`
    for (let i = 0; i < index + 2; i++) {
        yield `\tT${i},\n`
    }
    yield '>(\n'
    yield `\tvalue: ${formatArgumentReturnType('T0')},\n`
    let next
    for (let i = 0; i < index + 1; i++) {
        const current = `T${i}`
        next = `T${i + 1}`
        yield `\tfunc${i}: (value: ${current}) => ${formatArgumentReturnType(next)},\n`
    }
    yield `): ${formatFinalReturnType(next)};\n`
}


function formatAsyncArgumentReturnType(type) {
    return `PromiseLike<${type}> | ${type}`
}


function formatAsyncFinalReturnType(type) {
    return `Promise<${type}>`
}


await pipeline(
    function * () {
        yield '// Note: these typings are generated by a script\n'
        yield '// See generateTypings.js\n'
        for (let index = 0; index < OVERLOADS; index++) {
            yield * declarationStatement({
                index,
                name: 'pipe'
            })
        }
        for (let index = 0; index < OVERLOADS; index++) {
            yield * declarationStatement({
                index,
                name: 'asyncPipe',
                formatArgumentReturnType: formatAsyncArgumentReturnType,
                formatFinalReturnType: formatAsyncFinalReturnType
            })
        }
    },
    createWriteStream('./dist/piper.d.ts', 'utf-8')
)
