import { writeFileSync } from 'fs'


function identity(value) {
    return value
}


function declarationStatement({
    index,
    name,
    formatArgumentReturnType = identity,
    formatFinalReturnType = identity
}) {
    const lines = [ `export declare function ${name}<` ]
    for (let i = 0; i < index + 2; i++) {
        lines.push(`\tT${i},`)
    }
    lines.push('>(')
    lines.push(`\tvalue: ${formatArgumentReturnType('T0')},`)
    let next
    for (let i = 0; i < index + 1; i++) {
        const current = `T${i}`
        next = `T${i + 1}`
        lines.push(`\tfunc${i}: (value: ${current}) => ${formatArgumentReturnType(next)},`)
    }
    lines.push(`): ${formatFinalReturnType(next)};`)
    return lines.join('\n')
}


function main() {
    const lines = [
        '// Note: these typings are generated by a script',
        '// See generateTypings.js'
    ]
    for (let index = 0; index < 50; index++) {
        const statement = declarationStatement({
            index,
            name: 'pipe'
        })
        lines.push(statement)
    }
    for (let index = 0; index < 50; index++) {
        const statement = declarationStatement({
            index,
            name: 'asyncPipe',
            formatArgumentReturnType: type => `PromiseLike<${type}> | ${type}`,
            formatFinalReturnType: type => `Promise<${type}>`
        })
        lines.push(statement)
    }
    const joined = lines.join('\n')
    writeFileSync('./dist/piper.d.ts', joined)
}


main()
