from io import open
from argparse import ArgumentParser


def upper_case_character(x):
    return chr(96 + x - 32)


def declaration_line(x):
    string = 'export declare function pipe<\n'
    for i in range(x + 1):
        string += '\t' + upper_case_character(i + 1) + ',\n'
    string += '>(\n\tvalue: A,\n'
    for i in range(x):
        character = upper_case_character(i + 1)
        next_character = upper_case_character(i + 2)
        string += '\tfunc' \
            + character \
            + ': (value: ' \
            + character \
            + ') => ' \
            + next_character \
            + ',\n'
    string += '): ' + next_character
    return string


def main():
    parser = ArgumentParser()
    parser.add_argument('number', type=int, default=26)
    number = parser.parse_args().number
    if number > 24 or number < 1:
        parser.error('number must be <= 24 and >= 1')

    lines = (declaration_line(i) for i in range(2, number + 1))
    declaration = '// Note: these typings are generated by a script\n' \
        + '// See generateTypings.py\n\n' \
        + '\n'.join(lines)

    with open('./dist/index.d.ts', mode='w') as file:
        file.write(declaration)


if __name__ == '__main__':
    main()
